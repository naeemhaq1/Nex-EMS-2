import { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/contexts/AuthContext';
import { useLocation } from 'wouter';
import { ArrowLeft, Plus, Edit2, Trash2, Play, Pause, Clock, MessageCircle, Bell, Settings, Eye, Calendar, Send, ToggleLeft, ToggleRight } from 'lucide-react';
import MobileAdminDualNavigation from '@/components/mobile/MobileAdminDualNavigation';
import { apiRequest } from '@/lib/queryClient';

interface Announcement {
  id: number;
  title: string;
  content: string;
  type: 'general' | 'urgent' | 'maintenance' | 'event' | 'policy';
  status: 'active' | 'inactive' | 'scheduled' | 'draft';
  priority: 'low' | 'medium' | 'high' | 'critical';
  scheduledAt?: string;
  expiresAt?: string;
  whatsappEnabled: boolean;
  appEnabled: boolean;
  createdAt: string;
  createdBy: string;
  viewCount: number;
  targetType: 'all' | 'individuals' | 'groups' | 'departments';
  targetIds: string[];
  targetNames: string[];
}

export default function MobileAdminAnnouncements() {
  const { user } = useAuth();
  const [, navigate] = useLocation();
  const [activeTab, setActiveTab] = useState<'current' | 'scheduled' | 'auto' | 'settings'>('current');
  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const queryClient = useQueryClient();

  // Quick announcement state
  const [quickMessage, setQuickMessage] = useState('');
  const [quickDuration, setQuickDuration] = useState(60);
  const [quickDurationType, setQuickDurationType] = useState<'minutes' | 'hours' | 'days'>('minutes');
  const [quickPriority, setQuickPriority] = useState<'medium' | 'high' | 'critical'>('medium');

  const { data: announcements, isLoading } = useQuery({
    queryKey: ['/api/announcements'],
    enabled: !!user
  });

  const { data: autoSettings } = useQuery({
    queryKey: ['/api/announcements/settings'],
    enabled: !!user
  });

  const createMutation = useMutation({
    mutationFn: (data: any) => apiRequest('/api/announcements', { 
      method: 'POST', 
      body: JSON.stringify(data) 
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });
      setShowCreateModal(false);
    }
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: any }) => apiRequest(`/api/announcements/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(data) 
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });
      setShowEditModal(false);
      setSelectedAnnouncement(null);
    }
  });

  const deleteMutation = useMutation({
    mutationFn: (id: number) => apiRequest(`/api/announcements/${id}`, { 
      method: 'DELETE' 
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });
    }
  });

  const toggleStatusMutation = useMutation({
    mutationFn: ({ id, status }: { id: number; status: string }) => apiRequest(`/api/announcements/${id}/status`, { 
      method: 'PATCH', 
      body: JSON.stringify({ status }) 
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });
    }
  });

  // Quick announcement mutation
  const quickAnnounceMutation = useMutation({
    mutationFn: (data: any) => apiRequest('/api/announcements', { 
      method: 'POST', 
      body: JSON.stringify(data) 
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });
      setQuickMessage('');
      setQuickDuration(60);
      setQuickDurationType('minutes');
      setQuickPriority('medium');
    }
  });

  const handleQuickAnnounce = () => {
    if (!quickMessage.trim()) return;
    
    const now = new Date();
    const expiresAt = new Date(now);
    
    switch (quickDurationType) {
      case 'minutes':
        expiresAt.setMinutes(now.getMinutes() + quickDuration);
        break;
      case 'hours':
        expiresAt.setHours(now.getHours() + quickDuration);
        break;
      case 'days':
        expiresAt.setDate(now.getDate() + quickDuration);
        break;
    }

    quickAnnounceMutation.mutate({
      title: `Quick Announcement - ${quickPriority.charAt(0).toUpperCase() + quickPriority.slice(1)} Priority`,
      message: quickMessage,
      type: 'general',
      priority: quickPriority === 'critical' ? 'emergency' : quickPriority === 'high' ? 'high' : 'normal',
      expiresAt: expiresAt.toISOString(),
      targetType: 'all',
      targetIds: [],
      isActive: true,
      isAutoGenerated: false
    });
  };

  const currentAnnouncements = announcements?.filter((a: Announcement) => a.status === 'active') || [];
  const scheduledAnnouncements = announcements?.filter((a: Announcement) => a.status === 'scheduled') || [];
  const draftAnnouncements = announcements?.filter((a: Announcement) => a.status === 'draft') || [];

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'urgent': return 'bg-red-500';
      case 'maintenance': return 'bg-orange-500';
      case 'event': return 'bg-green-500';
      case 'policy': return 'bg-purple-500';
      default: return 'bg-blue-500';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical': return 'ðŸ”´';
      case 'high': return 'ðŸŸ ';
      case 'medium': return 'ðŸŸ¡';
      default: return 'ðŸŸ¢';
    }
  };

  const CreateAnnouncementModal = () => {
    const [formData, setFormData] = useState({
      title: '',
      content: '',
      type: 'general',
      priority: 'medium',
      scheduledAt: '',
      expiresAt: '',
      whatsappEnabled: true,
      appEnabled: true,
      targetType: 'all',
      targetIds: [],
      selectedEmployees: [],
      selectedDepartments: [],
      selectedGroups: []
    });

    // Search states for filtering with debouncing
    const [employeeSearch, setEmployeeSearch] = useState('');
    const [departmentSearch, setDepartmentSearch] = useState('');
    const [groupSearch, setGroupSearch] = useState('');
    
    // Debounced search values
    const [debouncedEmployeeSearch, setDebouncedEmployeeSearch] = useState('');
    const [debouncedDepartmentSearch, setDebouncedDepartmentSearch] = useState('');
    const [debouncedGroupSearch, setDebouncedGroupSearch] = useState('');

    // Memory cache for search results to avoid re-filtering on the same search terms
    const searchCache = useRef({
      employees: new Map(),
      departments: new Map(),
      groups: new Map()
    });

    // Debounce search inputs
    useEffect(() => {
      const timer = setTimeout(() => {
        setDebouncedEmployeeSearch(employeeSearch);
      }, 300);
      return () => clearTimeout(timer);
    }, [employeeSearch]);

    useEffect(() => {
      const timer = setTimeout(() => {
        setDebouncedDepartmentSearch(departmentSearch);
      }, 300);
      return () => clearTimeout(timer);
    }, [departmentSearch]);

    useEffect(() => {
      const timer = setTimeout(() => {
        setDebouncedGroupSearch(groupSearch);
      }, 300);
      return () => clearTimeout(timer);
    }, [groupSearch]);

    // Data queries with stale time for caching
    const { data: employees = [] } = useQuery({
      queryKey: ['/api/admin/employees'],
      enabled: formData.targetType === 'individuals' && !!user,
      staleTime: 5 * 60 * 1000, // 5 minutes cache
      gcTime: 10 * 60 * 1000, // 10 minutes garbage collection
    });

    const { data: departments = [] } = useQuery({
      queryKey: ['/api/admin/departments'],
      enabled: formData.targetType === 'departments' && !!user,
      staleTime: 5 * 60 * 1000, // 5 minutes cache
      gcTime: 10 * 60 * 1000, // 10 minutes garbage collection
    });

    const { data: groups = [] } = useQuery({
      queryKey: ['/api/admin/groups'],
      enabled: formData.targetType === 'groups' && !!user,
      staleTime: 5 * 60 * 1000, // 5 minutes cache
      gcTime: 10 * 60 * 1000, // 10 minutes garbage collection
    });

    // Memoized filtered data with memory caching to prevent unnecessary re-computations
    const filteredEmployees = useMemo(() => {
      if (debouncedEmployeeSearch.length < 2) return [];
      
      const cacheKey = `${debouncedEmployeeSearch}-${employees.length}`;
      
      // Check cache first
      if (searchCache.current.employees.has(cacheKey)) {
        return searchCache.current.employees.get(cacheKey);
      }
      
      const results = employees.filter((emp: any) => {
        const fullName = `${emp.firstName} ${emp.lastName}`.toLowerCase();
        const empCode = emp.employeeCode?.toLowerCase() || '';
        const department = emp.department?.toLowerCase() || '';
        const searchTerm = debouncedEmployeeSearch.toLowerCase();
        return fullName.includes(searchTerm) || empCode.includes(searchTerm) || department.includes(searchTerm);
      }).slice(0, 50); // Limit results for performance
      
      // Cache the results (keep last 10 searches)
      if (searchCache.current.employees.size >= 10) {
        const firstKey = searchCache.current.employees.keys().next().value;
        searchCache.current.employees.delete(firstKey);
      }
      searchCache.current.employees.set(cacheKey, results);
      
      return results;
    }, [employees, debouncedEmployeeSearch]);

    const filteredDepartments = useMemo(() => {
      if (debouncedDepartmentSearch.length < 1) return [];
      
      const cacheKey = `${debouncedDepartmentSearch}-${departments.length}`;
      
      if (searchCache.current.departments.has(cacheKey)) {
        return searchCache.current.departments.get(cacheKey);
      }
      
      const results = departments.filter((dept: any) =>
        dept.name?.toLowerCase().includes(debouncedDepartmentSearch.toLowerCase())
      );
      
      if (searchCache.current.departments.size >= 10) {
        const firstKey = searchCache.current.departments.keys().next().value;
        searchCache.current.departments.delete(firstKey);
      }
      searchCache.current.departments.set(cacheKey, results);
      
      return results;
    }, [departments, debouncedDepartmentSearch]);

    const filteredGroups = useMemo(() => {
      if (debouncedGroupSearch.length < 1) return [];
      
      const cacheKey = `${debouncedGroupSearch}-${groups.length}`;
      
      if (searchCache.current.groups.has(cacheKey)) {
        return searchCache.current.groups.get(cacheKey);
      }
      
      const results = groups.filter((group: any) =>
        group.name?.toLowerCase().includes(debouncedGroupSearch.toLowerCase())
      );
      
      if (searchCache.current.groups.size >= 10) {
        const firstKey = searchCache.current.groups.keys().next().value;
        searchCache.current.groups.delete(firstKey);
      }
      searchCache.current.groups.set(cacheKey, results);
      
      return results;
    }, [groups, debouncedGroupSearch]);

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      
      // Validate that selections require search first (except for "all")
      if (formData.targetType === 'individuals' && formData.selectedEmployees.length === 0) {
        alert('Please search and select at least one employee before creating announcement.');
        return;
      }
      if (formData.targetType === 'departments' && formData.selectedDepartments.length === 0) {
        alert('Please search and select at least one department before creating announcement.');
        return;
      }
      if (formData.targetType === 'groups' && formData.selectedGroups.length === 0) {
        alert('Please search and select at least one group before creating announcement.');
        return;
      }
      
      let targetIds = [];
      let targetNames = [];
      
      if (formData.targetType === 'individuals') {
        targetIds = formData.selectedEmployees;
        targetNames = employees?.filter((emp: any) => formData.selectedEmployees.includes(emp.id))
          .map((emp: any) => `${emp.firstName} ${emp.lastName}`) || [];
      } else if (formData.targetType === 'departments') {
        targetIds = formData.selectedDepartments;
        targetNames = departments?.filter((dept: any) => formData.selectedDepartments.includes(dept.id))
          .map((dept: any) => dept.name) || [];
      } else if (formData.targetType === 'groups') {
        targetIds = formData.selectedGroups;
        targetNames = groups?.filter((group: any) => formData.selectedGroups.includes(group.id))
          .map((group: any) => group.name) || [];
      }
      
      const data = {
        ...formData,
        status: formData.scheduledAt ? 'scheduled' : 'active',
        scheduledAt: formData.scheduledAt || null,
        expiresAt: formData.expiresAt || null,
        targetType: formData.targetType,
        targetIds,
        targetNames
      };
      createMutation.mutate(data);
    };

    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-[#2A2B5E] rounded-lg w-full max-w-md max-h-[90vh] overflow-y-scroll scrollbar-hide mobile-scroll" style={{
          WebkitOverflowScrolling: 'touch',
          msOverflowStyle: 'none',
          scrollbarWidth: 'none'
        }}>
          <div className="p-4 border-b border-gray-700">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-white">Create Announcement</h3>
              <button
                onClick={() => setShowCreateModal(false)}
                className="text-gray-400 hover:text-white"
              >
                Ã—
              </button>
            </div>
          </div>
          
          <form onSubmit={handleSubmit} className="p-4 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Content</label>
              <textarea
                value={formData.content}
                onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white h-24"
                required
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Type</label>
                <select
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                  className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
                >
                  <option value="general">General</option>
                  <option value="urgent">Urgent</option>
                  <option value="maintenance">Maintenance</option>
                  <option value="event">Event</option>
                  <option value="policy">Policy</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Priority</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                  className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="critical">Critical</option>
                </select>
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Schedule (Optional)</label>
              <input
                type="datetime-local"
                value={formData.scheduledAt}
                onChange={(e) => setFormData({ ...formData, scheduledAt: e.target.value })}
                className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Expires At (Optional)</label>
              <input
                type="datetime-local"
                value={formData.expiresAt}
                onChange={(e) => setFormData({ ...formData, expiresAt: e.target.value })}
                className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Send To</label>
              <select
                value={formData.targetType}
                onChange={(e) => {
                  setFormData({ ...formData, targetType: e.target.value, targetIds: [], selectedEmployees: [], selectedDepartments: [], selectedGroups: [] });
                  // Reset search fields when changing target type
                  setEmployeeSearch('');
                  setDepartmentSearch('');
                  setGroupSearch('');
                }}
                className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white"
              >
                <option value="all">All Employees</option>
                <option value="individuals">Specific Individuals</option>
                <option value="departments">Departments</option>
                <option value="groups">Groups</option>
              </select>
            </div>
            
            {formData.targetType === 'individuals' && (
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-300">Select Employees</label>
                
                {/* Search Input */}
                <input
                  type="text"
                  placeholder="Search employees by name, code, or department..."
                  value={employeeSearch}
                  onChange={(e) => setEmployeeSearch(e.target.value)}
                  className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white placeholder-gray-400"
                />
                
                {/* Selected count and clear button */}
                <div className="flex items-center justify-between">
                  {formData.selectedEmployees.length > 0 && (
                    <div className="text-sm text-blue-400">
                      {formData.selectedEmployees.length} employee(s) selected
                    </div>
                  )}
                  {formData.selectedEmployees.length > 0 && (
                    <button
                      type="button"
                      onClick={() => setFormData({ ...formData, selectedEmployees: [] })}
                      className="text-xs text-red-400 hover:text-red-300"
                    >
                      Clear All
                    </button>
                  )}
                </div>
                
                {/* Selection area with better height and search results */}
                <div className="max-h-48 overflow-y-auto border border-gray-600 rounded bg-[#1A1B3E]">
                  {employeeSearch.length < 2 ? (
                    <div className="p-4 text-center text-gray-400">
                      Enter at least 2 characters to search employees
                    </div>
                  ) : debouncedEmployeeSearch.length < 2 ? (
                    <div className="p-4 text-center text-gray-400 text-sm">
                      <div className="animate-pulse">Searching...</div>
                    </div>
                  ) : filteredEmployees.length === 0 ? (
                    <div className="p-4 text-center text-gray-400">
                      No employees found matching "{debouncedEmployeeSearch}"
                    </div>
                  ) : (
                    <div className="p-2 space-y-1">
                      {filteredEmployees.map((emp: any) => (
                        <label key={emp.id} className="flex items-center space-x-3 p-2 hover:bg-[#2A2B5E] rounded cursor-pointer">
                          <input
                            type="checkbox"
                            checked={formData.selectedEmployees.includes(emp.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setFormData({
                                  ...formData,
                                  selectedEmployees: [...formData.selectedEmployees, emp.id]
                                });
                              } else {
                                setFormData({
                                  ...formData,
                                  selectedEmployees: formData.selectedEmployees.filter(id => id !== emp.id)
                                });
                              }
                            }}
                            className="rounded"
                          />
                          <div className="flex-1">
                            <div className="text-white text-sm font-medium">{emp.firstName} {emp.lastName}</div>
                            {emp.employeeCode && (
                              <div className="text-gray-400 text-xs">{emp.employeeCode} â€¢ {emp.department || 'No Dept'}</div>
                            )}
                          </div>
                        </label>
                      ))}
                      {employees.length > filteredEmployees.length && (
                        <div className="p-2 text-center text-gray-400 text-xs">
                          Showing {filteredEmployees.length} results (limited to 50). Refine your search for more specific results.
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {formData.targetType === 'departments' && (
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-300">Select Departments</label>
                
                {/* Search Input */}
                <input
                  type="text"
                  placeholder="Search departments..."
                  value={departmentSearch}
                  onChange={(e) => setDepartmentSearch(e.target.value)}
                  className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white placeholder-gray-400"
                />
                
                {/* Selected count and clear button */}
                <div className="flex items-center justify-between">
                  {formData.selectedDepartments.length > 0 && (
                    <div className="text-sm text-blue-400">
                      {formData.selectedDepartments.length} department(s) selected
                    </div>
                  )}
                  {formData.selectedDepartments.length > 0 && (
                    <button
                      type="button"
                      onClick={() => setFormData({ ...formData, selectedDepartments: [] })}
                      className="text-xs text-red-400 hover:text-red-300"
                    >
                      Clear All
                    </button>
                  )}
                </div>
                
                {/* Selection area */}
                <div className="max-h-48 overflow-y-auto border border-gray-600 rounded bg-[#1A1B3E]">
                  {departmentSearch.length < 1 ? (
                    <div className="p-4 text-center text-gray-400">
                      Start typing to search departments
                    </div>
                  ) : debouncedDepartmentSearch.length < 1 ? (
                    <div className="p-4 text-center text-gray-400 text-sm">
                      <div className="animate-pulse">Searching...</div>
                    </div>
                  ) : filteredDepartments.length === 0 ? (
                    <div className="p-4 text-center text-gray-400">
                      No departments found matching "{debouncedDepartmentSearch}"
                    </div>
                  ) : (
                    <div className="p-2 space-y-1">
                      {filteredDepartments.map((dept: any) => (
                        <label key={dept.id} className="flex items-center space-x-3 p-2 hover:bg-[#2A2B5E] rounded cursor-pointer">
                          <input
                            type="checkbox"
                            checked={formData.selectedDepartments.includes(dept.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setFormData({
                                  ...formData,
                                  selectedDepartments: [...formData.selectedDepartments, dept.id]
                                });
                              } else {
                                setFormData({
                                  ...formData,
                                  selectedDepartments: formData.selectedDepartments.filter(id => id !== dept.id)
                                });
                              }
                            }}
                            className="rounded"
                          />
                          <div className="flex-1">
                            <div className="text-white text-sm font-medium">{dept.name}</div>
                            {dept.employeeCount && (
                              <div className="text-gray-400 text-xs">{dept.employeeCount} employees</div>
                            )}
                          </div>
                        </label>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {formData.targetType === 'groups' && (
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-300">Select Groups</label>
                
                {/* Search Input */}
                <input
                  type="text"
                  placeholder="Search groups..."
                  value={groupSearch}
                  onChange={(e) => setGroupSearch(e.target.value)}
                  className="w-full px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded text-white placeholder-gray-400"
                />
                
                {/* Selected count and clear button */}
                <div className="flex items-center justify-between">
                  {formData.selectedGroups.length > 0 && (
                    <div className="text-sm text-blue-400">
                      {formData.selectedGroups.length} group(s) selected
                    </div>
                  )}
                  {formData.selectedGroups.length > 0 && (
                    <button
                      type="button"
                      onClick={() => setFormData({ ...formData, selectedGroups: [] })}
                      className="text-xs text-red-400 hover:text-red-300"
                    >
                      Clear All
                    </button>
                  )}
                </div>
                
                {/* Selection area */}
                <div className="max-h-48 overflow-y-auto border border-gray-600 rounded bg-[#1A1B3E]">
                  {groupSearch.length < 1 ? (
                    <div className="p-4 text-center text-gray-400">
                      Start typing to search groups
                    </div>
                  ) : debouncedGroupSearch.length < 1 ? (
                    <div className="p-4 text-center text-gray-400 text-sm">
                      <div className="animate-pulse">Searching...</div>
                    </div>
                  ) : filteredGroups.length === 0 ? (
                    <div className="p-4 text-center text-gray-400">
                      No groups found matching "{debouncedGroupSearch}"
                    </div>
                  ) : (
                    <div className="p-2 space-y-1">
                      {filteredGroups.map((group: any) => (
                        <label key={group.id} className="flex items-center space-x-3 p-2 hover:bg-[#2A2B5E] rounded cursor-pointer">
                          <input
                            type="checkbox"
                            checked={formData.selectedGroups.includes(group.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setFormData({
                                  ...formData,
                                  selectedGroups: [...formData.selectedGroups, group.id]
                                });
                              } else {
                                setFormData({
                                  ...formData,
                                  selectedGroups: formData.selectedGroups.filter(id => id !== group.id)
                                });
                              }
                            }}
                            className="rounded"
                          />
                          <div className="flex-1">
                            <div className="text-white text-sm font-medium">{group.name}</div>
                            {group.description && (
                              <div className="text-gray-400 text-xs">{group.description}</div>
                            )}
                          </div>
                        </label>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-300">App Notifications</span>
                <button
                  type="button"
                  onClick={() => setFormData({ ...formData, appEnabled: !formData.appEnabled })}
                  className="text-blue-400"
                >
                  {formData.appEnabled ? <ToggleRight size={20} /> : <ToggleLeft size={20} />}
                </button>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-300">WhatsApp Notifications</span>
                <button
                  type="button"
                  onClick={() => setFormData({ ...formData, whatsappEnabled: !formData.whatsappEnabled })}
                  className="text-green-400"
                >
                  {formData.whatsappEnabled ? <ToggleRight size={20} /> : <ToggleLeft size={20} />}
                </button>
              </div>
            </div>
            
            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setShowCreateModal(false)}
                className="flex-1 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={createMutation.isPending}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {createMutation.isPending ? 'Creating...' : 'Create'}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  return (
    <div className="h-screen bg-[#1A1B3E] text-white overflow-hidden flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between px-4 py-3 border-b border-gray-800">
        <div className="flex items-center space-x-3">
          <button 
            onClick={() => navigate('/mobile/admin/dashboard')}
            className="p-1 rounded-lg hover:bg-gray-800"
          >
            <ArrowLeft className="w-5 h-5 text-gray-400" />
          </button>
          <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-600 rounded-full flex items-center justify-center">
            <Bell className="w-5 h-5 text-white" />
          </div>
          <div>
            <h2 className="text-white font-semibold text-base">Announcements</h2>
            <p className="text-gray-400 text-xs">Manage & Schedule</p>
          </div>
        </div>
        <button
          onClick={() => setShowCreateModal(true)}
          className="px-3 py-1.5 rounded-lg text-xs font-medium flex items-center space-x-1 bg-blue-600 hover:bg-blue-700"
        >
          <Plus className="w-4 h-4" />
          <span>New</span>
        </button>
      </div>

      {/* Quick Announcement Section */}
      <div className="bg-gradient-to-r from-purple-600/20 to-blue-600/20 border-b border-gray-800">
        <div className="p-4">
          <div className="bg-[#2A2B5E] rounded-lg p-4 border border-purple-500/30">
            <div className="flex items-center space-x-3 mb-3">
              <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center">
                <Send className="w-4 h-4 text-white" />
              </div>
              <div>
                <h3 className="text-white font-semibold text-sm">Quick Announcement</h3>
                <p className="text-gray-400 text-xs">Send instant message to all employees</p>
              </div>
            </div>
            
            <div className="space-y-3">
              {/* Message Input */}
              <div>
                <textarea
                  value={quickMessage}
                  onChange={(e) => setQuickMessage(e.target.value)}
                  placeholder="Type your announcement message here..."
                  className="w-full h-16 px-3 py-2 bg-[#1A1B3E] border border-gray-600 rounded-lg text-white text-sm placeholder-gray-400 focus:border-purple-500 focus:outline-none resize-none"
                  maxLength={500}
                />
                <div className="flex justify-between items-center mt-1">
                  <span className="text-xs text-gray-400">{quickMessage.length}/500</span>
                  <div className="flex items-center space-x-3">
                    <div className="flex items-center space-x-1">
                      <MessageCircle className="w-3 h-3 text-green-400" />
                      <span className="text-xs text-green-400">WhatsApp</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Bell className="w-3 h-3 text-blue-400" />
                      <span className="text-xs text-blue-400">App</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Duration and Priority Controls */}
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs font-medium text-gray-300 mb-1">Duration</label>
                  <div className="flex space-x-1">
                    <input
                      type="number"
                      value={quickDuration}
                      onChange={(e) => setQuickDuration(parseInt(e.target.value) || 1)}
                      min="1"
                      max="365"
                      className="flex-1 px-2 py-1.5 bg-[#1A1B3E] border border-gray-600 rounded text-white text-xs focus:border-purple-500 focus:outline-none"
                    />
                    <select
                      value={quickDurationType}
                      onChange={(e) => setQuickDurationType(e.target.value as 'minutes' | 'hours' | 'days')}
                      className="px-2 py-1.5 bg-[#1A1B3E] border border-gray-600 rounded text-white text-xs focus:border-purple-500 focus:outline-none"
                    >
                      <option value="minutes">Min</option>
                      <option value="hours">Hrs</option>
                      <option value="days">Days</option>
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className="block text-xs font-medium text-gray-300 mb-1">Priority</label>
                  <select
                    value={quickPriority}
                    onChange={(e) => setQuickPriority(e.target.value as 'medium' | 'high' | 'critical')}
                    className="w-full px-2 py-1.5 bg-[#1A1B3E] border border-gray-600 rounded text-white text-xs focus:border-purple-500 focus:outline-none"
                  >
                    <option value="medium">ðŸŸ¡ Medium</option>
                    <option value="high">ðŸŸ  High</option>
                    <option value="critical">ðŸ”´ Critical</option>
                  </select>
                </div>
              </div>
              
              <button
                onClick={handleQuickAnnounce}
                disabled={!quickMessage.trim() || quickAnnounceMutation.isPending}
                className="w-full px-4 py-2.5 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center space-x-2 font-medium text-sm"
              >
                {quickAnnounceMutation.isPending ? (
                  <>
                    <div className="w-3 h-3 border border-white border-t-transparent rounded-full animate-spin"></div>
                    <span>Announcing...</span>
                  </>
                ) : (
                  <>
                    <Send className="w-3 h-3" />
                    <span>Announce Now</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="flex border-b border-gray-800">
        {[
          { key: 'current', label: 'Current', icon: Bell },
          { key: 'scheduled', label: 'Scheduled', icon: Clock },
          { key: 'auto', label: 'Auto', icon: Settings },
          { key: 'settings', label: 'Settings', icon: Settings }
        ].map(({ key, label, icon: Icon }) => (
          <button
            key={key}
            onClick={() => setActiveTab(key as any)}
            className={`flex-1 px-3 py-3 text-xs font-medium flex items-center justify-center space-x-1 ${
              activeTab === key 
                ? 'text-blue-400 border-b-2 border-blue-400 bg-blue-400/10' 
                : 'text-gray-400 hover:text-white'
            }`}
          >
            <Icon className="w-4 h-4" />
            <span>{label}</span>
          </button>
        ))}
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-y-scroll scrollbar-hide mobile-scroll pb-32" style={{
        WebkitOverflowScrolling: 'touch',
        msOverflowStyle: 'none',
        scrollbarWidth: 'none'
      }}>
        {activeTab === 'current' && (
          <div className="p-4 space-y-3">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-semibold text-white">Active Announcements ({currentAnnouncements.length})</h3>
            </div>
            
            {currentAnnouncements.map((announcement: Announcement) => (
              <div key={announcement.id} className="bg-[#2A2B5E] rounded-lg p-3">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <div className={`w-2 h-2 rounded-full ${getTypeColor(announcement.type)}`}></div>
                    <span className="text-sm font-medium text-white">{announcement.title}</span>
                    <span className="text-xs">{getPriorityIcon(announcement.priority)}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <button
                      onClick={() => {
                        setSelectedAnnouncement(announcement);
                        setShowEditModal(true);
                      }}
                      className="p-1 text-gray-400 hover:text-blue-400"
                    >
                      <Edit2 className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => toggleStatusMutation.mutate({ 
                        id: announcement.id, 
                        status: announcement.status === 'active' ? 'inactive' : 'active' 
                      })}
                      className="p-1 text-gray-400 hover:text-green-400"
                    >
                      {announcement.status === 'active' ? <Pause className="w-3 h-3" /> : <Play className="w-3 h-3" />}
                    </button>
                    <button
                      onClick={() => deleteMutation.mutate(announcement.id)}
                      className="p-1 text-gray-400 hover:text-red-400"
                    >
                      <Trash2 className="w-3 h-3" />
                    </button>
                  </div>
                </div>
                
                <p className="text-xs text-gray-300 mb-2 line-clamp-2">{announcement.content}</p>
                
                <div className="flex items-center justify-between text-xs text-gray-400">
                  <div className="flex items-center space-x-3">
                    <div className="flex items-center space-x-1">
                      <Eye className="w-3 h-3" />
                      <span>{announcement.viewCount || 0}</span>
                    </div>
                    {announcement.whatsappEnabled && (
                      <MessageCircle className="w-3 h-3 text-green-400" />
                    )}
                    {announcement.appEnabled && (
                      <Bell className="w-3 h-3 text-blue-400" />
                    )}
                    {announcement.targetType && announcement.targetType !== 'all' && (
                      <span className="bg-blue-600 px-2 py-1 rounded text-xs text-white">
                        {announcement.targetType === 'individuals' ? `${announcement.targetNames?.length || 0} people` :
                         announcement.targetType === 'departments' ? `${announcement.targetNames?.length || 0} depts` :
                         `${announcement.targetNames?.length || 0} groups`}
                      </span>
                    )}
                  </div>
                  <span>{new Date(announcement.createdAt).toLocaleDateString()}</span>
                </div>
              </div>
            ))}
            
            {currentAnnouncements.length === 0 && (
              <div className="text-center py-8">
                <Bell className="w-12 h-12 text-gray-600 mx-auto mb-3" />
                <p className="text-gray-400 text-sm">No active announcements</p>
                <button
                  onClick={() => setShowCreateModal(true)}
                  className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700"
                >
                  Create First Announcement
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'scheduled' && (
          <div className="p-4 space-y-3">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-semibold text-white">Scheduled Announcements ({scheduledAnnouncements.length})</h3>
            </div>
            
            {scheduledAnnouncements.map((announcement: Announcement) => (
              <div key={announcement.id} className="bg-[#2A2B5E] rounded-lg p-3">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4 text-orange-400" />
                    <span className="text-sm font-medium text-white">{announcement.title}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <button
                      onClick={() => toggleStatusMutation.mutate({ 
                        id: announcement.id, 
                        status: 'active' 
                      })}
                      className="p-1 text-gray-400 hover:text-green-400"
                    >
                      <Send className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => deleteMutation.mutate(announcement.id)}
                      className="p-1 text-gray-400 hover:text-red-400"
                    >
                      <Trash2 className="w-3 h-3" />
                    </button>
                  </div>
                </div>
                
                <p className="text-xs text-gray-300 mb-2">{announcement.content}</p>
                
                <div className="flex items-center justify-between text-xs text-gray-400">
                  <div className="flex items-center space-x-1">
                    <Calendar className="w-3 h-3" />
                    <span>
                      {announcement.scheduledAt && new Date(announcement.scheduledAt).toLocaleString()}
                    </span>
                  </div>
                  <span className="text-orange-400 font-medium">Scheduled</span>
                </div>
              </div>
            ))}
            
            {scheduledAnnouncements.length === 0 && (
              <div className="text-center py-8">
                <Clock className="w-12 h-12 text-gray-600 mx-auto mb-3" />
                <p className="text-gray-400 text-sm">No scheduled announcements</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'auto' && (
          <div className="p-4 space-y-4">
            <h3 className="text-sm font-semibold text-white mb-4">Auto Announcements</h3>
            
            {[
              { 
                type: 'birthday', 
                title: 'Birthday Wishes', 
                description: 'Automatic birthday announcements for employees',
                enabled: autoSettings?.birthday || false
              },
              { 
                type: 'work_anniversary', 
                title: 'Work Anniversary', 
                description: 'Celebrate employee work anniversaries',
                enabled: autoSettings?.workAnniversary || false
              },
              { 
                type: 'welcome', 
                title: 'Welcome Messages', 
                description: 'Welcome new employees automatically',
                enabled: autoSettings?.welcome || false
              },
              { 
                type: 'attendance_reminder', 
                title: 'Attendance Reminders', 
                description: 'Daily attendance and punctuality reminders',
                enabled: autoSettings?.attendanceReminder || false
              },
              { 
                type: 'policy_updates', 
                title: 'Policy Updates', 
                description: 'Automatic policy and procedure notifications',
                enabled: autoSettings?.policyUpdates || false
              }
            ].map((item) => (
              <div key={item.type} className="bg-[#2A2B5E] rounded-lg p-3">
                <div className="flex items-center justify-between mb-2">
                  <div>
                    <h4 className="text-sm font-medium text-white">{item.title}</h4>
                    <p className="text-xs text-gray-400">{item.description}</p>
                  </div>
                  <button className={`p-1 ${item.enabled ? 'text-green-400' : 'text-gray-500'}`}>
                    {item.enabled ? <ToggleRight size={20} /> : <ToggleLeft size={20} />}
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="p-4 space-y-4">
            <h3 className="text-sm font-semibold text-white mb-4">Notification Settings</h3>
            
            <div className="space-y-3">
              <div className="bg-[#2A2B5E] rounded-lg p-3">
                <h4 className="text-sm font-medium text-white mb-2">WhatsApp Integration</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">Send to WhatsApp by default</span>
                    <ToggleRight className="text-green-400" size={16} />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">Include announcement link</span>
                    <ToggleRight className="text-green-400" size={16} />
                  </div>
                </div>
              </div>
              
              <div className="bg-[#2A2B5E] rounded-lg p-3">
                <h4 className="text-sm font-medium text-white mb-2">App Notifications</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">Push notifications</span>
                    <ToggleRight className="text-blue-400" size={16} />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">In-app alerts</span>
                    <ToggleRight className="text-blue-400" size={16} />
                  </div>
                </div>
              </div>
              
              <div className="bg-[#2A2B5E] rounded-lg p-3">
                <h4 className="text-sm font-medium text-white mb-2">Scheduling</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">Auto-publish scheduled</span>
                    <ToggleRight className="text-blue-400" size={16} />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-300">Auto-expire old announcements</span>
                    <ToggleLeft className="text-gray-500" size={16} />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Create Modal */}
      {showCreateModal && <CreateAnnouncementModal />}

      {/* Bottom Navigation */}
      <MobileAdminDualNavigation currentPage="announcements" />
    </div>
  );
}